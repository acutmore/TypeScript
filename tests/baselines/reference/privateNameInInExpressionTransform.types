=== tests/cases/conformance/classes/members/privateNames/privateNameInInExpressionTransform.ts ===
// TODO(aclaymore) add cases for static fields

class Foo {
>Foo : Foo

    #p1 = 1;
>#p1 : number
>1 : 1

    check(v: any) {
>check : (v: any) => void
>v : any

        #p1 in v; // expect WeakMap '_p1'
>#p1 in v : boolean
>v : any
    }
    precedence(v: any) {
>precedence : (v: any) => void
>v : any

        // '==' has lower precedence than 'in'
        // '<'  has same precedence than 'in'
        // '<<' has higher precedence than 'in'

        v == #p1 in v == v; // Good precedence: ((v == (#p1 in v)) == v)
>v == #p1 in v == v : boolean
>v == #p1 in v : boolean
>v : any
>#p1 in v : boolean
>v : any
>v : any

        v << #p1 in v << v; // Good precedence: (v << (#p1 in (v << v)))
>v << #p1 in v << v : number
>v : any
>#p1 in v << v : boolean
>v << v : number
>v : any
>v : any

        v << #p1 in v == v; // Good precedence: ((v << (#p1 in v)) == v)
>v << #p1 in v == v : boolean
>v << #p1 in v : number
>v : any
>#p1 in v : boolean
>v : any
>v : any

        v == #p1 in v < v; // Good precedence: (v == ((#p1 in v) < v))
>v == #p1 in v < v : boolean
>v : any
>#p1 in v < v : boolean
>#p1 in v : boolean
>v : any
>v : any

        #p1 in v && #p1 in v; // Good precedence: ((#p1 in v) && (#p1 in v))
>#p1 in v && #p1 in v : boolean
>#p1 in v : boolean
>v : any
>#p1 in v : boolean
>v : Foo
    }
    invalidLHS(v: any) {
>invalidLHS : (v: any) => void
>v : any

        'prop' in v = 10;
>'prop' in v : boolean
>'prop' : "prop"
>v : any
>10 : 10

        #p1 in v = 10;
>#p1 in v : boolean
>v : any
>10 : 10
    }
}

class Bar {
>Bar : Bar

    #p1 = 1;
>#p1 : number
>1 : 1

    check(v: any) {
>check : (v: any) => void
>v : any

        #p1 in v; // expect WeakMap '_p1_1'
>#p1 in v : boolean
>v : any
    }
}

function syntaxError(v: Foo) {
>syntaxError : (v: Foo) => any
>v : Foo

    return #p1 in v; // expect `return in v` so runtime will have a syntax error
>#p1 in v : any
>v : Foo
}

export { }

