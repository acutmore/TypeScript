=== tests/cases/conformance/classes/members/privateNames/privateNameInInExpression.ts ===
// TODO(aclaymore) split up into seperate cases

class Foo {
>Foo : Symbol(Foo, Decl(privateNameInInExpression.ts, 0, 0))

    #p1 = 1;
>#p1 : Symbol(Foo.#p1, Decl(privateNameInInExpression.ts, 2, 11))

    basics(v: any) {
>basics : Symbol(Foo.basics, Decl(privateNameInInExpression.ts, 3, 12))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 4, 11))

        const a = #p1 in v; // Good - a is boolean
>a : Symbol(a, Decl(privateNameInInExpression.ts, 5, 13))

        const b = #p1 in v.p1.p2; // Good - b is boolean
>b : Symbol(b, Decl(privateNameInInExpression.ts, 7, 13))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 4, 11))

        const c = #p1 in (v as {}); // Good - c is boolean
>c : Symbol(c, Decl(privateNameInInExpression.ts, 9, 13))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 4, 11))

        const d = #p1 in (v as Foo); // Good d is boolean (not true)
>d : Symbol(d, Decl(privateNameInInExpression.ts, 11, 13))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 4, 11))
>Foo : Symbol(Foo, Decl(privateNameInInExpression.ts, 0, 0))

        const e = #p1 in (v as unknown); // Bad - RHS of in must be object type or any
>e : Symbol(e, Decl(privateNameInInExpression.ts, 13, 13))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 4, 11))

        const f = #p2 in v; // Bad - Invalid privateID
>f : Symbol(f, Decl(privateNameInInExpression.ts, 15, 13))

        const g = (#p1) in v; // Bad - private id is not an expression on it's own
>g : Symbol(g, Decl(privateNameInInExpression.ts, 17, 13))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 4, 11))

        for (#p1 in v) { /* no-op */ } // Bad - 'in' not allowed
>v : Symbol(v, Decl(privateNameInInExpression.ts, 4, 11))

        for (let x in #p1 in v) { /* no-op */ } // Bad - rhs of in should be a object/any
>x : Symbol(x, Decl(privateNameInInExpression.ts, 21, 16))

        for (let x in #p1 in v as any) { /* no-op */ } // Good - weird but valid
>x : Symbol(x, Decl(privateNameInInExpression.ts, 23, 16))

    }
    precedence(v: any) {
>precedence : Symbol(Foo.precedence, Decl(privateNameInInExpression.ts, 25, 5))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))

        // '==' has lower precedence than 'in'
        // '<'  has same prededence than 'in'
        // '<<' has higher prededence than 'in'

        v == #p1 in v == v; // Good precidence: ((v == (#p1 in v)) == v)
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))

        v << #p1 in v << v; // Good precidence: (v << (#p1 in (v << v)))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))

        v << #p1 in v == v; // Good precidence: ((v << (#p1 in v)) == v)
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))

        v == #p1 in v < v; // Good precidence: (v == ((#p1 in v) < v))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 26, 15))

        #p1 in v && #p1 in v; // Good precidence: ((#p1 in v) && (#p1 in v))
    }
    flow(v: unknown) {
>flow : Symbol(Foo.flow, Decl(privateNameInInExpression.ts, 40, 5))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 41, 9))

        if (typeof v === 'object' && v !== null) {
>v : Symbol(v, Decl(privateNameInInExpression.ts, 41, 9))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 41, 9))

            if (#p1 in v) {
                const y1 = v; // good y1 is typeof Foo
>y1 : Symbol(y1, Decl(privateNameInInExpression.ts, 44, 21))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 41, 9))

            } else {
                const y2 = v; // y2 is not typeof Foo
>y2 : Symbol(y2, Decl(privateNameInInExpression.ts, 46, 21))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 41, 9))
            }
        }

        class Nested {
>Nested : Symbol(Nested, Decl(privateNameInInExpression.ts, 48, 9))

            m(v: any) {
>m : Symbol(Nested.m, Decl(privateNameInInExpression.ts, 50, 22))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 51, 14))

                if (#p1 in v) {
                   const y1 = v; // Good y1 if typeof Foo
>y1 : Symbol(y1, Decl(privateNameInInExpression.ts, 53, 24))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 51, 14))
                }
            }
        }
    }
}

function error(v: Foo) {
>error : Symbol(error, Decl(privateNameInInExpression.ts, 58, 1))
>v : Symbol(v, Decl(privateNameInInExpression.ts, 60, 15))
>Foo : Symbol(Foo, Decl(privateNameInInExpression.ts, 0, 0))

    return #p1 in v; // Bad - outside of class
}

