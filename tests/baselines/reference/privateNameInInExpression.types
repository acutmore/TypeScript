=== tests/cases/conformance/classes/members/privateNames/privateNameInInExpression.ts ===
// TODO(aclaymore) split up into separate cases

class Foo {
>Foo : Foo

    #p1 = 1;
>#p1 : number
>1 : 1

    basics(v: any) {
>basics : (v: any) => void
>v : any

        const a = #p1 in v; // Good - a is boolean
>a : boolean
>#p1 in v : boolean
>v : any

        const b = #p1 in v.p1.p2; // Good - b is boolean
>b : boolean
>#p1 in v.p1.p2 : boolean
>v.p1.p2 : any
>v.p1 : any
>v : any
>p1 : any
>p2 : any

        const c = #p1 in (v as {}); // Good - c is boolean
>c : boolean
>#p1 in (v as {}) : boolean
>(v as {}) : {}
>v as {} : {}
>v : any

        const d = #p1 in (v as Foo); // Good d is boolean (not true)
>d : boolean
>#p1 in (v as Foo) : boolean
>(v as Foo) : Foo
>v as Foo : Foo
>v : any

        const e = #p1 in (v as unknown); // Bad - RHS of in must be object type or any
>e : boolean
>#p1 in (v as unknown) : boolean
>(v as unknown) : unknown
>v as unknown : unknown
>v : any

        const f = #p2 in v; // Bad - Invalid privateID
>f : any
>#p2 in v : any
>v : any

        const g = (#p1) in v; // Bad - private id is not an expression on its own
>g : boolean
>(#p1) in v : boolean
>(#p1) : any
>v : any

        for (#p1 in v) { /* no-op */ } // Bad - 'in' not allowed
>#p1 : any
>v : any

        for (let x in #p1 in v) { /* no-op */ } // Bad - rhs of in should be a object/any
>x : string
>#p1 in v : boolean
>v : any

        for (let x in #p1 in v as any) { /* no-op */ } // Good - weird but valid
>x : string
>#p1 in v as any : any
>#p1 in v : boolean
>v : any

    }
    whitespace(v: any) {
>whitespace : (v: any) => void
>v : any

        const a = v && /*0*/#p1/*1*/
>a : any
>v && /*0*/#p1/*1*/            /*2*/in/*3*/                /*4*/v : any
>v : any
>#p1/*1*/            /*2*/in/*3*/                /*4*/v : boolean

            /*2*/in/*3*/
                /*4*/v/*5*/
>v : any
    }
    flow(u: unknown, fb: Foo | Bar, fs: FooSub, b: Bar, fsb: FooSub | Bar) {
>flow : (u: unknown, fb: Foo | Bar, fs: FooSub, b: Bar, fsb: FooSub | Bar) => void
>u : unknown
>fb : Foo | Bar
>fs : FooSub
>b : Bar
>fsb : Bar | FooSub

        if (typeof u === 'object') {
>typeof u === 'object' : boolean
>typeof u : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u : unknown
>'object' : "object"

            if (#p1 in u) {
>#p1 in u : boolean
>u : object | null

                u; // good u is Foo
>u : Foo

            } else {
                u; // good u is object | null
>u : object | null
            }

            if (u !== null) {
>u !== null : boolean
>u : object | null
>null : null

                if (#p1 in u) {
>#p1 in u : boolean
>u : object

                    u; // good u is Foo
>u : Foo

                } else {
                    u; // good u is object
>u : object
                }
            }
        }

        if (#p1 in fb) {
>#p1 in fb : boolean
>fb : Foo | Bar

            fb; // good fb is Foo
>fb : Foo

        } else {
            fb; // good fb is Bar
>fb : Bar
        }

        if (#p1 in fs) {
>#p1 in fs : boolean
>fs : FooSub

            fs; // good fb is Foo (or FooSub?)
>fs : Foo

        } else {
            fs; // good fs is never
>fs : never
        }

        if (#p1 in b) {
>#p1 in b : boolean
>b : Bar

            b; // good b is 'Bar & Foo'
>b : Bar & Foo

        } else {
            b; // good b is Bar
>b : Bar
        }

        if (#p1 in fsb) {
>#p1 in fsb : boolean
>fsb : Bar | FooSub

            fsb; // good fsb is FooSub
>fsb : FooSub

        } else {
            fsb; // good fsb is Bar
>fsb : Bar
        }

        class Nested {
>Nested : Nested

            m(v: any) {
>m : (v: any) => void
>v : any

                if (#p1 in v) {
>#p1 in v : boolean
>v : any

                    v; // good v is Foo
>v : Foo
                }
            }
        }
    }
}

class FooSub extends Foo { }
>FooSub : FooSub
>Foo : Foo

class Bar { notFoo = true }
>Bar : Bar
>notFoo : boolean
>true : true

function error(v: Foo) {
>error : (v: Foo) => any
>v : Foo

    return #p1 in v; // Bad - outside of class
>#p1 in v : any
>v : Foo
}

export { }

